#include <iostream>
#include <fstream>
#include <math.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <ros/ros.h>
#include <ros/console.h>
#include <sensor_msgs/PointCloud2.h>

#include <nav_msgs/Odometry.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>
#include <visualization_msgs/MarkerArray.h>
#include <visualization_msgs/Marker.h>
#include <Eigen/Core>
#include <Eigen/Dense>
#include <Eigen/Geometry>

#include <ompl/config.h>
#include <ompl/base/StateSpace.h>
#include <ompl/base/Path.h>
#include <ompl/base/spaces/RealVectorBounds.h>
#include <ompl/base/spaces/RealVectorStateSpace.h>
#include <ompl/base/StateValidityChecker.h>
#include <ompl/base/OptimizationObjective.h>
#include <ompl/base/objectives/PathLengthOptimizationObjective.h>
#include <ompl/geometric/planners/rrt/RRTstar.h>
#include <ompl/geometric/SimpleSetup.h>

#include <geometry_msgs/PoseStamped.h>
#include <octomap/octomap.h>
#include <octomap/OcTree.h>
#include <octomap/ColorOcTree.h>
#include <octomap_msgs/Octomap.h>
#include <octomap_msgs/conversions.h>

#include <tf/transform_listener.h>
#include <tf/transform_datatypes.h>
#include <tf/transform_broadcaster.h>

#define SOPHUS_USE_BASIC_LOGGING
#include <sophus/so3.hpp>
#include <sophus/se3.hpp>

#include "rrt.h"

using namespace std;
using namespace Eigen;

namespace ob = ompl::base;
namespace og = ompl::geometric;

double _resolution, _inv_resolution, _cloud_margin;
double _x_size, _y_size, _z_size;    
double drone_fly_height = 2.0; // 默认飞行高度

Eigen::Vector3d _start_pt;
Eigen::Vector3d _map_lower, _map_upper;
int _max_x_id, _max_y_id, _max_z_id;
std::string map_link;

ros::Subscriber _map_sub, _pts_sub, _odom_sub, _mav_sub;
ros::Publisher  _grid_map_vis_pub, _RRTstar_path_vis_pub;

// RRT map main class
RRTstarPreparatory * _RRTstar_preparatory     = new RRTstarPreparatory();

// postures
geometry_msgs::PoseStamped mavPosture, RtabmapPosture;

// 观测到的点云
pcl::PointCloud<pcl::PointXYZ> cloud_vis;
// 保留观测的帧数
int count_num = 30;
// 记录用的容器
std::vector<pcl::PointCloud<pcl::PointXYZ>> clouds_;

void pathFinding(const Vector3d start_pt, const Vector3d target_pt);
void visRRTstarPath(vector<Vector3d> nodes );

void rcvCurrentPoseCallback(const geometry_msgs::PoseStamped & pos){
    _start_pt(0) = pos.pose.position.x;
    _start_pt(1) = pos.pose.position.y;
    _start_pt(2) = pos.pose.position.z;
}

void rcvWaypointsCallback(const geometry_msgs::PoseStamped & wp)
{     
    ROS_INFO("[node] receive the planning target");
    ROS_INFO("[node] target location: %f, %f, %f", 
	wp.pose.position.x,
	wp.pose.position.y,
	drone_fly_height);

     ROS_INFO("[node] start location: %f, %f, %f", 
	_start_pt(0),
	_start_pt(1),
	_start_pt(2));

    if( wp.pose.position.z < 0.0)
        return;

    Vector3d target_pt;
    target_pt << wp.pose.position.x,
                 wp.pose.position.y, drone_fly_height;
                 //wp.pose.position.z;

    pathFinding(_start_pt, target_pt); 
}

// PointCloud2 -> pcl point clouds
void rcvPointCloudCallBack(const sensor_msgs::PointCloud2 & pointcloud_map)
{   
    double pi = 3.1415926535;
    pcl::PointCloud<pcl::PointXYZ> cloud;
    pcl::PointCloud<pcl::PointXYZ> cloud_;
    sensor_msgs::PointCloud2 map_vis;

    pcl::fromROSMsg(pointcloud_map, cloud);
    
    if( (int)cloud.points.size() == 0 ) return;

    pcl::PointXYZ pt;
    for (int idx = 0; idx < (int)cloud.points.size(); idx++)
    {    
        pt = cloud.points[idx];        
        Eigen::MatrixXd new_loc(1, 3);
        new_loc  << pt.x, pt.y, pt.z;

        if (isnan(pt.x) || isnan(pt.y) || isnan(pt.z)) {
            //ROS_INFO("[INFO] NAN point is detected");
            continue;
        }

        if (new_loc.norm() > 5.0){
            // 太远的也不需要
            continue;
        }

        // set obstalces into grid map for path planning
        _RRTstar_preparatory->setObs(new_loc(0, 0), new_loc(0, 1), new_loc(0, 2));

        // for visualize only
        Vector3d cor_round = _RRTstar_preparatory->coordRounding(Vector3d(new_loc(0, 0), new_loc(0, 1), new_loc(0, 2)));
        pt.x = cor_round(0);
        pt.y = cor_round(1);
        pt.z = cor_round(2);
        cloud_.points.push_back(pt);
    }

    // 显示点云
    clouds_.push_back(cloud_);
    if (clouds_.size() > count_num) {
        clouds_.erase(clouds_.begin());
    }
    cloud_vis.clear();
    for (int ii = 0; ii < clouds_.size(); ii++) {
        for (int jj = 0; jj < clouds_[ii].size(); jj++)
            cloud_vis.points.push_back(clouds_[ii].points[jj]);
    }

    cloud_vis.width    = cloud_vis.points.size();
    cloud_vis.height   = 1;
    cloud_vis.is_dense = true;

    pcl::toROSMsg(cloud_vis, map_vis);

    map_vis.header.frame_id = map_link.c_str();
    map_vis.header.stamp = ros::Time::now();
    _grid_map_vis_pub.publish(map_vis);
}

class ValidityChecker : public ob::StateValidityChecker
{
public:
    ValidityChecker(const ob::SpaceInformationPtr& si) :ob::StateValidityChecker(si) {}
    //返回给定状态的位置是否与圆形障碍物重叠
    bool isValid(const ob::State* state) const
    {   
        //在本例中使用的是RealVectorStateSpace，因此需要将状态转换为特定类型。
        const ob::RealVectorStateSpace::StateType* state3D =state->as<ob::RealVectorStateSpace::StateType>();
        auto x=(*state3D)[0];
        auto y=(*state3D)[1];
        auto z=(*state3D)[2];

        return _RRTstar_preparatory->isObsFree(x, y, z, 10, 10, 10);
    }
};

//返回表示优化目标的结构，以用于优化运动规划。该方法返回一个目标，该目标试图最小化计算路径在配置空间中的长度。
ob::OptimizationObjectivePtr getPathLengthObjective(const ob::SpaceInformationPtr& si)
{
    return ob::OptimizationObjectivePtr(new ob::PathLengthOptimizationObjective(si));
}

ob::OptimizationObjectivePtr getThresholdPathLengthObj(const ob::SpaceInformationPtr& si)
{
    ob::OptimizationObjectivePtr obj(new ob::PathLengthOptimizationObjective(si));
    obj->setCostThreshold(ob::Cost(1.51));
    return obj;
}

void pathFinding(const Vector3d start_pt, const Vector3d target_pt)
{
    //创建正在规划的机器人状态空间。
    ob::StateSpacePtr space(new ob::RealVectorStateSpace(3));

    //将空间的边界设置为[0,1]。
    ob::RealVectorBounds bounds(3);
    bounds.setLow(0, - _x_size * 0.5);
    bounds.setLow(1, - _y_size * 0.5);
    bounds.setLow(2, - _z_size * 0.5);

    bounds.setHigh(0, + _x_size * 0.5);
    bounds.setHigh(1, + _y_size * 0.5);
    bounds.setHigh(2, + _z_size * 0.5);
    // -x_max / 2 --- +x_max / 2
    // -y_max / 2 --- +y_max / 2
    // 0          --- z_max
    space->as<ob::RealVectorStateSpace>()->setBounds(bounds);

    //为此状态空间构造一个空间信息实例
    ob::SpaceInformationPtr si(new ob::SpaceInformation(space));
    //设置用于检查空间中哪些状态有效的对象
    si->setStateValidityChecker(ob::StateValidityCheckerPtr(new ValidityChecker(si)));
    si->setup();

    //设置机器人的开始状态
    ob::ScopedState<> start(space);
    start[0]=(&start_pt)->operator[](0);
    start[1]=(&start_pt)->operator[](1);
    start[2]=(&start_pt)->operator[](2);

    //设置机器人的目标状态
    ob::ScopedState<> goal(space);
    goal[0]=(&target_pt)->operator[](0);
    goal[1]=(&target_pt)->operator[](1);
    goal[2]=(&target_pt)->operator[](2);

    //创建问题实例，将变量定义为pdef
    auto pdef(std::make_shared<ob::ProblemDefinition>(si));

    //设置开始和目标状态
    pdef->setStartAndGoalStates(start, goal);

    //设置优化目标，可以选择的选项在前面已经定义：getPathLengthObjective（）和getThresholdPathLengthObj（）
    pdef->setOptimizationObjective(getPathLengthObjective(si));
    
    //使用RRTstar算法构建我们的优化计划器，将Variable定义为optimizingPlanner
    ob::PlannerPtr optimizingPlanner(new og::RRTstar(si));

    //为规划者提供解决问题的实例
    optimizingPlanner->setProblemDefinition(pdef);
    optimizingPlanner->setup();

    // 尝试在两秒钟内解决规划问题
    ob::PlannerStatus solved = optimizingPlanner->solve(2.0);

    if (solved)
    {
        //从问题定义中获取目标表示（与目标状态不同），并查询找到的路径
        og::PathGeometric* path = pdef->getSolutionPath()->as<og::PathGeometric>();
        vector<Vector3d> path_points;

        for (size_t path_idx = 0; path_idx < path->getStateCount (); path_idx++)
        {
            const ob::RealVectorStateSpace::StateType *state = path->getState(path_idx)->as<ob::RealVectorStateSpace::StateType>(); 
            //将找到的路径从路径转换为rviz显示的路径点
            auto x = (*state)[0];
            auto y = (*state)[1];
            auto z = (*state)[2];
            Vector3d temp_mat(x,y,z);
            path_points.push_back(temp_mat); 
        }
        visRRTstarPath(path_points);       
    }
}

void visRRTstarPath(vector<Vector3d> nodes )
{
    //点是绿色，线是绿色
    visualization_msgs::Marker Points, Line; 
    Points.header.frame_id = "map";
    Points.header.stamp    =  ros::Time::now();
    Points.ns              =  "demo_node/RRTstarPath";
    Points.action          =  visualization_msgs::Marker::ADD;
    Points.pose.orientation.w = Line.pose.orientation.w = 1.0;
    Points.id = 0;
    Points.type = visualization_msgs::Marker::POINTS;
    Points.scale.x = _resolution/2; 
    Points.scale.y = _resolution/2;
    Points.color.g = 1.0f;
    Points.color.a = 1.0;

    Line.header.frame_id = "map";
    Line.header.stamp    = ros::Time::now();
    Line.ns              = "demo_node/RRTstarPath";
    Line.action          = visualization_msgs::Marker::ADD;
    Line.id   = 1;
    Line.type   = visualization_msgs::Marker::LINE_STRIP;
    Line.scale.x   = _resolution/2;
    Line.color.b   = 1.0;
    Line.color.a   = 1.0;

    geometry_msgs::Point pt;
    for(int i = 0; i < int(nodes.size()); i++)
    {
        Vector3d coord = nodes[i];
        pt.x = coord(0);
        pt.y = coord(1);
        pt.z = coord(2);
        Points.points.push_back(pt);
        Line.points.push_back(pt);
    }
    _RRTstar_path_vis_pub.publish(Points);
    _RRTstar_path_vis_pub.publish(Line); 
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "rrt_demo");
    ros::NodeHandle nh;

    ROS_INFO("[node] RRT_NODE Start");

    _odom_sub = nh.subscribe("/mavros/local_position/pose", 1, rcvCurrentPoseCallback);
    _pts_sub  = nh.subscribe( "/move_base_simple/goal", 1, rcvWaypointsCallback );
    _map_sub  = nh.subscribe( "/voxel_cloud", 1, rcvPointCloudCallBack );

    // 发布grid map
    // 发布 RRT 路径
    _grid_map_vis_pub             = nh.advertise<sensor_msgs::PointCloud2>("/grid_map_vis", 1);
    _RRTstar_path_vis_pub         = nh.advertise<visualization_msgs::Marker>("/rrt_star_path_vis", 1);

    nh.param("map/cloud_margin",  _cloud_margin, 0.0);
    nh.param("map/resolution",    _resolution,   0.05);
    
    nh.param("map/x_size", _x_size, 20.0);
    nh.param("map/y_size", _y_size, 20.0);
    nh.param("map/z_size", _z_size, 10.0 );
    
    nh.param("planning/start_x",  _start_pt(0),  0.0);
    nh.param("planning/start_y",  _start_pt(1),  0.0);
    nh.param("planning/start_z",  _start_pt(2),  2.5);

    nh.param<std::string>("map_link", map_link, "depth_camera_link");
    nh.param<int>("observed_frames", count_num, 30);
    nh.param<double>("drone_flying_height", drone_fly_height, 2.0);

    _map_lower << - _x_size/2.0, - _y_size/2.0,     0.0;
    _map_upper << + _x_size/2.0, + _y_size/2.0,  +_z_size ;
    
    _inv_resolution = 1.0 / _resolution;
    
    _max_x_id = (int)(_x_size * _inv_resolution);
    _max_y_id = (int)(_y_size * _inv_resolution);
    _max_z_id = (int)(_z_size * _inv_resolution);

    _RRTstar_preparatory  = new RRTstarPreparatory();
    _RRTstar_preparatory  -> initGridMap(_resolution, _map_lower, _map_upper, _max_x_id, _max_y_id, _max_z_id);
    
    ros::Rate rate(100);
    bool status = ros::ok();
    while(status) 
    {
        ros::spinOnce();      
        status = ros::ok();
        rate.sleep();
    }

    delete _RRTstar_preparatory;
    return 0;
}

